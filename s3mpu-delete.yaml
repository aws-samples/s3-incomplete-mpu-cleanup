Resources:
    SSMAutomationDocument:
      Type: "AWS::SSM::Document"
      Properties:
        Name: MPU_Abort_Policy
        DocumentType: "Automation"
        Content:
          schemaVersion: "0.3"
          description: 'Apply S3 Abort Multipart Policy'
          assumeRole: '{{AutomationAssumeRole}}'
          parameters:
            AutomationAssumeRole:
              type: String
              description: '(Required) The Amazon Resource Name (ARN) of the IAM role that allows Automation to perform the actions on your behalf. If no role is specified, Systems Manager Automation uses your IAM permissions to operate this runbook.'
            ResourceId:
              type: String
              description: (Required) S3 bucket name.
          mainSteps:
            - name: s3Multipath
              action: 'aws:executeScript'
              inputs:
                Runtime: python3.8
                Handler: s3Multipath
                InputPayload:
                  ResourceId: "{{ResourceId}}"
                Script: |-
                  def s3Multipath(events,context):   
                    import boto3
                    from botocore.exceptions import ClientError
                    import json
            
                    client = boto3.client('s3')
            
            
                    mpu_policy = {
                                "Expiration": {
                                    "ExpiredObjectDeleteMarker": False
                                },
                                "ID": "Incomplete-MPU-Delete-SSM-Remediation",
                                "Filter": {},
                                "Status": "Enabled",
                                "AbortIncompleteMultipartUpload": {
                                    "DaysAfterInitiation": 7
                              }
                          }
            
                    try: 
                        response = client.get_bucket_lifecycle_configuration(
                        Bucket=events['ResourceId']
                        )
                        lifecycle_config = response.get('Rules')
                        lifecycle_config.append(mpu_policy)
                        client = boto3.client('s3')
                        mpu = client.put_bucket_lifecycle_configuration(Bucket=events['ResourceId'], LifecycleConfiguration=   {'Rules':lifecycle_config})
                    except ClientError as e:
                        if e.response['Error']['Code'] == 'NoSuchLifecycleConfiguration':
                            response = client.put_bucket_lifecycle_configuration(Bucket=events['ResourceId'], LifecycleConfiguration= {'Rules':[mpu_policy]})
                        else:
                            print("Unexpected error: %s" % e)
    S3MPUCheck:
      DependsOn: SSMAutomationDocument
      Type: AWS::Config::ConfigRule
      Properties: 
        ConfigRuleName: S3_MPU_Policy_Check
        Description: Checking For MPU Abort Policy on S3 Buckets
        InputParameters: Json
        Scope:
          ComplianceResourceTypes: 
            - "AWS::S3::Bucket"
        Source:
          Owner: CUSTOM_POLICY
          CustomPolicyDetails:
            EnableDebugLogDelivery: false
            PolicyRuntime: guard-2.x.x
            PolicyText: |-
                         let aws_s3_bucket = resourceType
                         rule check_s3_multipart_delete when %aws_s3_bucket == "AWS::S3::Bucket" {
                          supplementaryConfiguration.BucketLifecycleConfiguration exists
                          supplementaryConfiguration.BucketLifecycleConfiguration.rules exists
                          supplementaryConfiguration.BucketLifecycleConfiguration.rules is_list
                          supplementaryConfiguration.BucketLifecycleConfiguration.rules !empty
                          some supplementaryConfiguration.BucketLifecycleConfiguration.rules[*] { 
                            status == "Enabled"
                            filter empty
                            abortIncompleteMultipartUpload.daysAfterInitiation >= 0
                          }
                         }
      
          SourceDetails:
          - EventSource: aws.config
            MessageType: ConfigurationItemChangeNotification
          - EventSource: aws.config
            MessageType: OversizedConfigurationItemChangeNotification
    SSMRole:
      DependsOn: S3MPUCheck
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - ssm.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: Role to provide access to S3
        Policies:
          - PolicyName: EmbeddedInlinePolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action: 
                    - 's3:PutLifecycleConfiguration'
                    - 's3:GetLifecycleConfiguration'
                  Resource: '*'
    MPURemediation:
      DependsOn: SSMRole
      Type: AWS::Config::RemediationConfiguration
      Properties:
        ConfigRuleName: S3_MPU_Policy_Check
        ResourceType: "AWS::S3::Bucket"
        TargetId: "MPU_Abort_Policy"
        TargetType: "SSM_DOCUMENT"
        TargetVersion: "1"
        Parameters:
          AutomationAssumeRole: 
            StaticValue: 
              Values:
                - !GetAtt [ SSMRole, Arn ] 
          ResourceId: 
            ResourceValue:
              Value: "RESOURCE_ID"       
        ExecutionControls:
          SsmControls:
            ConcurrentExecutionRatePercentage: 10
            ErrorPercentage: 10
        Automatic: True
        MaximumAutomaticAttempts: 10
        RetryAttemptSeconds: 600